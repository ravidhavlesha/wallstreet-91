{"version":3,"sources":["services/StockService.js","components/StockRow.js","components/StockList.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["console","log","socket","io","transports","StockRow","stock","TableRow","style","backgroundColor","change","TableCell","component","scope","longName","scripName","align","price","percentChange","volume","lastTradingTime","useStyles","makeStyles","table","minWidth","tableHead","fontWeight","StockList","classes","useState","stocks","setStocks","socketId","setSocketId","stocksFetched","setStocksFetched","useEffect","email","callback","userEmail","localStorage","getItem","on","setInterval","emit","off","disconnect","length","TableContainer","Paper","Table","className","size","TableHead","TableBody","map","index","key","LinearProgress","APP_NAME","process","Header","AppBar","position","Toolbar","Typography","variant","App","showStocks","setShowStocks","CssBaseline","Container","Box","marginTop","marginBottom","Divider","Button","color","onClick","window","location","reload","TextField","id","placeholder","fullWidth","margin","required","document","getElementById","value","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2d67ff47.chunk.js","sourcesContent":["import io from 'socket.io-client';\n\nconst SOCKET_URL = 'http://localhost:5000';\n\nconsole.log('ConsoleLog: SOCKET_URL', SOCKET_URL);\n\nconst socket = io(SOCKET_URL, { transports: ['websocket'] });\n\nfunction subscribeToStocks(email, callback) {\n  // Instead of getting the email as argument, can be fetched here from local storage\n  // for showing same content on multiple tabs.\n  socket.on('stocks-fetched', (stocks) => callback(stocks));\n  setInterval(() => {\n    socket.emit('fetch-stocks', { email });\n  }, 3000);\n}\n\nfunction unsubscribeToStocks() {\n  socket.off('fetch-stocks');\n  socket.disconnect();\n}\n\nexport { subscribeToStocks, unsubscribeToStocks };\n","import React from 'react';\nimport { TableRow, TableCell } from '@material-ui/core';\n\nfunction StockRow({ stock }) {\n  return (\n    <TableRow style={{ backgroundColor: stock.change >= 0 ? '#9de4af' : '#fdaab0' }}>\n      <TableCell component=\"th\" scope=\"row\">\n        {stock.longName} ({stock.scripName})\n      </TableCell>\n      <TableCell align=\"right\">{stock.price}</TableCell>\n      <TableCell align=\"right\">{stock.change}</TableCell>\n      <TableCell align=\"right\">{stock.percentChange}</TableCell>\n      <TableCell align=\"right\">{stock.volume}</TableCell>\n      <TableCell align=\"right\">{stock.lastTradingTime}</TableCell>\n    </TableRow>\n  );\n}\n\nexport default StockRow;\n","import React, { useState, useEffect } from 'react';\nimport {\n  TableContainer,\n  Paper,\n  Table,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableBody,\n  makeStyles,\n  LinearProgress,\n} from '@material-ui/core';\n\nimport { subscribeToStocks, unsubscribeToStocks } from '../services/StockService';\nimport StockRow from './StockRow';\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650,\n  },\n  tableHead: {\n    fontWeight: 'bold',\n  },\n});\n\nfunction StockList() {\n  const classes = useStyles();\n\n  const [stocks, setStocks] = useState([]);\n  const [socketId, setSocketId] = useState(null);\n  const [stocksFetched, setStocksFetched] = useState(false);\n\n  useEffect(() => {\n    const userEmail = localStorage.getItem('email') || '';\n    subscribeToStocks(userEmail, ({ stocks, socketId }) => {\n      setStocks(stocks);\n      setSocketId(socketId);\n      setStocksFetched(true);\n    });\n\n    return () => unsubscribeToStocks();\n  }, []);\n\n  return stocks && stocks.length > 0 ? (\n    <>\n      <h4>Session ID: {socketId || ''}</h4>\n      <TableContainer component={Paper}>\n        <Table className={classes.table} size=\"small\">\n          <TableHead>\n            <TableRow>\n              <TableCell className={classes.tableHead}>Company</TableCell>\n              <TableCell className={classes.tableHead} align=\"right\">\n                Price\n              </TableCell>\n              <TableCell className={classes.tableHead} align=\"right\">\n                Change\n              </TableCell>\n              <TableCell className={classes.tableHead} align=\"right\">\n                Percent Change\n              </TableCell>\n              <TableCell className={classes.tableHead} align=\"right\">\n                Volume\n              </TableCell>\n              <TableCell className={classes.tableHead} align=\"right\">\n                Last Trading Time\n              </TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {stocks.map((stock, index) => (\n              <StockRow key={index} stock={stock} />\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </>\n  ) : stocksFetched ? (\n    <h4>No stocks found for this email</h4>\n  ) : (\n    <LinearProgress />\n  );\n}\n\nexport default StockList;\n","import React from 'react';\nimport { AppBar, Toolbar, Typography } from '@material-ui/core';\n\nconst APP_NAME = process.env.APP_NAME || 'Wallstreet91';\n\nfunction Header() {\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <Typography variant=\"h6\">{APP_NAME}</Typography>\n      </Toolbar>\n    </AppBar>\n  );\n}\n\nexport default Header;\n","import React, { useState } from 'react';\nimport { CssBaseline, Container, Box, TextField, Button, Divider } from '@material-ui/core';\n\nimport StockList from './components/StockList';\nimport Header from './components/Header';\n\nfunction App() {\n  const [showStocks, setShowStocks] = useState(localStorage.getItem('email') ? true : false);\n\n  return (\n    <>\n      <CssBaseline />\n      <Header />\n      <Container>\n        <Box marginTop={5} marginBottom={5}>\n          {showStocks ? (\n            <>\n              <StockList />\n              <Divider style={{ marginTop: '2em', marginBottom: '2em' }} />\n              <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                onClick={() => {\n                  delete localStorage.email;\n                  window.location.reload();\n                }}>\n                Reset Email\n              </Button>\n            </>\n          ) : (\n            <>\n              <TextField id=\"email\" placeholder=\"Email\" fullWidth margin=\"normal\" required />\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={() => {\n                  localStorage.email = document.getElementById('email').value;\n                  setShowStocks(true);\n                }}>\n                Start\n              </Button>\n            </>\n          )}\n        </Box>\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}